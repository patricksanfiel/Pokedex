{"version":3,"sources":["Assets/Images/pokeball.svg","UtilityFunctions/formatter.js","Components/SelectedPokemonAbilitiesList.js","Components/SelectedPokemonMovesList.js","Components/SelectedPokemonImage.js","Components/SelectedPokemonStats.js","Components/SelectedPokemonTypes.js","Components/SelectedPokemon.js","Components/FindOrDisplayPokemon.js","Components/Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","formatter","string","formattedString","currentMove","includes","replace","split","forEach","word","firstChar","toUpperCase","SelectedPokemonAbilitiesList","props","abilitiesArray","react_default","a","createElement","className","map","ability","currentAbilityName","name","key","SelectedPokemonMovesList","state","movesArray","_this","formattedMovesArray","movesPaginationObject","pageNumber","currentPageArray","pageCounter","moveCounter","this","move","sort","push","length","concat","setState","event","buttonClicked","target","getAttribute","movesPaginationObjectLength","Object","keys","console","log","currentlyDisplayedMoves","loadPaginationObject","_this2","renderMoves","onClick","incrementPage","data-button","Component","pokeball","require","SelectedPokemonImage","spritesURLObject","spritesObject","spritesPropertyArray","spritesURLArrayIndex","currentProperty","nextProperty","filter","property","spritesPropertyArrayFinalPosition","spritesCurrentProperty","currentSpriteURL","src","alt","id","height","width","changeImage","generatePropertyArray","renderImage","renderChangeImageButtons","SelectedPokemonStats","sortedStatsObjectArray","statsObjectArray","currentObject","nextObject","stat","statsObject","currentStat","currentStatValue","base_stat","SelectedPokemonTypes","typesObjectArray","typeObject","currentTypeName","type","SelectedPokemon","currentPokemonObject","pokemonObject","currentPokemonName","currentPokemonAttributeNames","sortOrder","currentAtt","nextAtt","indexOf","attribute","abilities","Components_SelectedPokemonAbilitiesList","weight","moves","Components_SelectedPokemonMovesList","sprites","Components_SelectedPokemonImage","stats","Components_SelectedPokemonStats","types","Components_SelectedPokemonTypes","getPokemonAttributeNames","renderAttributeElement","FindOrDisplayPokemon","allPokemonArray","pokemonList","selectedPokemonObject","searchedPokemonArray","viewList","viewSearch","searchQuery","value","sortedPokemonList","pokemon","selectedPokemon","trim","fetch","then","response","json","list","_this3","getSelectedPokemonObject","_this4","onChange","searchPokemonByName","style","border","renderList","searchedPokemon","_this5","_this6","selectedPokemonName","undefined","listDisplaySwitch","searchDisplaySwitch","Components_SelectedPokemon","selectedPokemonDisplaySwitch","Pokedex","pokemonSelected","results","element","currentPokemon","nextPokemon","getPokemonList","Components_FindOrDisplayPokemon","App","Components_Pokedex","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1c6f0d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.cde52270.svg\";","const formatter = (string) => {\n        let formattedString = string\n        let currentMove = \"\"\n        while(formattedString.includes(\"-\")){\n            formattedString = formattedString.replace(\"-\", \" \")\n        }\n\n        formattedString.split(\" \").forEach(word=>{\n            let firstChar = word[0]\n            formattedString = word.replace(firstChar, firstChar.toUpperCase())\n            currentMove = currentMove===\"\"?currentMove+formattedString: currentMove+\" \"+formattedString\n        })\n        return currentMove\n}\n\n\n\nexport default formatter","import React from 'react';\nimport formatter from \"../UtilityFunctions/formatter\"\n\n\nconst SelectedPokemonAbilitiesList = (props) => {\n\n    const abilitiesArray = props.abilitiesArray\n    return(\n        <div className=\"selected-pokemon-attribute-div\">\n            <header>Abilities</header>\n            <ul>\n                {abilitiesArray.map(ability => {\n                    const currentAbilityName = ability.ability.name\n                    return <li className=\"attribute-list-item\" key={currentAbilityName}>{formatter(currentAbilityName)}</li>\n                })}\n            </ul>\n        </div> \n    )\n\n}\n\n\nexport default SelectedPokemonAbilitiesList;","import React, { Component } from 'react';\nimport formatter from '../UtilityFunctions/formatter';\n\nclass SelectedPokemonMovesList extends Component{\n    state={\n        movesArray:this.props.movesArray,\n        formattedMovesArray:[],\n        movesPaginationObject:{},\n        pageNumber:1\n    }\n\n    \n    loadPaginationObject(){\n        let currentPageArray = []\n        let pageCounter = 0\n        let moveCounter = 0\n        let movesPaginationObject = {}\n        const movesArray = this.state.movesArray.map(move=>move.move.name).sort()\n        movesArray.forEach(move => {\n            moveCounter++\n            currentPageArray.push(move)\n            if(currentPageArray.length===5){\n                pageCounter++\n                movesPaginationObject[`${pageCounter}`] = currentPageArray\n                currentPageArray = []\n            } else if(moveCounter===movesArray.length){\n                pageCounter++\n                movesPaginationObject[`${pageCounter}`] = currentPageArray\n                currentPageArray = []\n            }\n        })\n        this.setState({movesPaginationObject:movesPaginationObject})\n    }\n    \n\n    incrementPage(event){\n        const buttonClicked = event.target.getAttribute(\"data-button\");\n        let pageNumber = this.state.pageNumber\n        const movesPaginationObject = this.state.movesPaginationObject\n        const movesPaginationObjectLength = Object.keys(movesPaginationObject).length\n        console.log(buttonClicked)\n        switch(buttonClicked){\n            case(\"next\"):\n                pageNumber = (pageNumber+1)<=movesPaginationObjectLength?pageNumber+1:1\n                break\n            default:\n                pageNumber = (pageNumber-1)>=1?pageNumber-1:movesPaginationObjectLength\n        }\n        this.setState({pageNumber: pageNumber})\n    }\n\n    renderMoves(){\n        const movesPaginationObject = this.state.movesPaginationObject\n        const pageNumber = this.state.pageNumber\n        const currentlyDisplayedMoves = movesPaginationObject[pageNumber]\n        if(currentlyDisplayedMoves){\n            return currentlyDisplayedMoves.map(move => {\n                return <li className=\"attribute-list-item\" key={move}>{formatter(move)}</li>\n            })    \n        }\n    }\n\n    componentDidMount(){\n        this.loadPaginationObject()\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"selected-pokemon-attribute-div\">\n                <header>Moves</header>\n                <ul>\n                    {this.renderMoves()}\n                </ul>\n                <button onClick={(event)=>this.incrementPage(event)} className=\"carousel-button\"><i className=\"fas fa-arrow-left\" data-button=\"previous\"></i></button>\n                <button onClick={(event)=>this.incrementPage(event)} className=\"carousel-button\"><i className=\"fas fa-arrow-right\" data-button=\"next\"></i></button>\n            </div>\n        )\n    }\n}\n\n\nexport default SelectedPokemonMovesList;","import React, { Component } from 'react';\nconst pokeball = require(\"../Assets/Images/pokeball.svg\")\n\nclass SelectedPokemonImage extends Component {\n    state = {\n        spritesURLObject: this.props.spritesObject,\n        spritesPropertyArray: [],\n        spritesURLArrayIndex:0\n    }\n    generatePropertyArray(){\n        const spritesURLObject = this.state.spritesURLObject\n        const spritesPropertyArray = Object.keys(spritesURLObject).sort((currentProperty, nextProperty) => currentProperty>nextProperty?-1:1).filter(property=>spritesURLObject[property]!==null)//Based on the alphabetical order of property names, we want the ones whose values are front-facing pokemon pictures to be displayed before the rear facing pokemon pictures. We also want to eliminate any property tied to a null value.\n        this.setState({spritesPropertyArray: spritesPropertyArray})\n    }\n\n    changeImage(event){\n        let spritesURLArrayIndex = this.state.spritesURLArrayIndex;\n        const spritesPropertyArray = this.state.spritesPropertyArray;\n        const spritesPropertyArrayFinalPosition = (spritesPropertyArray.length-1)\n        const buttonClicked = event.target.getAttribute(\"data-button\")\n        switch(buttonClicked){\n            case(\"previous\"):\n                if(spritesURLArrayIndex>0){\n                    spritesURLArrayIndex--\n                } else {\n                    spritesURLArrayIndex = (spritesPropertyArrayFinalPosition)\n                }\n                break;\n            default:\n                if(spritesURLArrayIndex<spritesPropertyArrayFinalPosition){\n                    spritesURLArrayIndex++\n                } else {\n                    spritesURLArrayIndex = 0;\n                }\n        }\n        this.setState({spritesURLArrayIndex: spritesURLArrayIndex})\n    }\n\n    renderImage(){\n        const spritesURLObject = this.state.spritesURLObject;\n        const spritesCurrentProperty = this.state.spritesPropertyArray[this.state.spritesURLArrayIndex]\n        const currentSpriteURL = spritesURLObject[spritesCurrentProperty]\n        if(currentSpriteURL){\n            return(\n                <div>\n                    <img src={currentSpriteURL} alt={`${this.props.name}-${spritesCurrentProperty}`}/>\n                </div> \n            )\n        } else {\n            return(\n                <div>\n                    <img src={pokeball} alt=\"pokeball\" id=\"pokeball-image\" height=\"100px\" width=\"100px\"/>\n                    <p>Sorry, no image available</p>\n                </div>\n            )\n        }\n    }\n\n    renderChangeImageButtons(){\n        if(this.state.spritesPropertyArray.length>1){\n            return(\n                <div>\n                    <button onClick={(event)=>this.changeImage(event)} className=\"carousel-button\"><i className=\"fas fa-arrow-left\" data-button=\"previous\"></i></button>\n                    <button onClick={(event)=>this.changeImage(event)} className=\"carousel-button\"><i className=\"fas fa-arrow-right\" data-button=\"next\"></i></button>\n                </div>\n            )\n        } else {\n            return null\n        }\n    }\n   \n    componentDidMount(){\n        this.generatePropertyArray()\n    }\n    render(){\n        return(\n            <div id=\"selected-pokemon-image-div\" className=\"selected-pokemon-attribute-div\">\n                {this.renderImage()}\n                {this.renderChangeImageButtons()}\n            </div>\n        )\n    }\n}\n\n\nexport default SelectedPokemonImage;","import React from 'react';\nimport formatter from \"../UtilityFunctions/formatter\";\n\nconst SelectedPokemonStats =  (props) => {\n    const sortedStatsObjectArray = props.statsObjectArray.sort((currentObject, nextObject)=>currentObject.stat.name>nextObject.stat.name?1:-1);\n    return(\n        <div className=\"selected-pokemon-attribute-div\">\n            <header>Stats</header>\n            <ul>\n                {sortedStatsObjectArray.map(statsObject => {\n                    const currentStat = statsObject.stat.name\n                    const currentStatValue = statsObject.base_stat\n                    return <li className=\"attribute-list-item\" key={`${props.name}-${currentStat}`}>{formatter(currentStat)}: {currentStatValue}</li>\n                })}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default SelectedPokemonStats","import React from 'react';\nimport formatter from \"../UtilityFunctions/formatter\";\n\nconst SelectedPokemonTypes = (props) => {\n    const typesObjectArray = props.typesObjectArray\n    return(\n        <div id=\"selected-pokemon-types-div\" className=\"selected-pokemon-attribute-div\">\n            <header id=\"types-header\">Types</header>\n            {typesObjectArray.map(typeObject => {\n                const currentTypeName = typeObject.type.name\n                return <button className={`${currentTypeName} type`} key={`${props.name}-${currentTypeName}`}>{formatter(currentTypeName)}</button>\n            })}\n        </div>\n    )\n}\n\n\n\nexport default SelectedPokemonTypes","import React, { Component } from 'react';\nimport SelectedPokemonAbilitiesList from './SelectedPokemonAbilitiesList';\nimport SelectedPokemonMovesList from './SelectedPokemonMovesList';\nimport SelectedPokemonImage from './SelectedPokemonImage';\nimport SelectedPokemonStats from './SelectedPokemonStats';\nimport SelectedPokemonTypes from './SelectedPokemonTypes';\nimport formatter from '../UtilityFunctions/formatter'\n\nclass SelectedPokemon extends Component{\n    state = {\n        currentPokemonObject: this.props.pokemonObject,\n        currentPokemonName: this.props.pokemonObject.name,\n        currentPokemonAttributeNames: []\n    }\n\n\n    getPokemonAttributeNames(){\n        const currentPokemonObject = this.state.currentPokemonObject\n        const currentPokemonAttributeNames = this.state.currentPokemonAttributeNames\n        for(var property in currentPokemonObject){\n            if(property==='abilities' || property === 'height' || property === 'moves' || property === 'sprites' || property === 'stats' || property === 'types'|| property === 'weight'){\n                currentPokemonAttributeNames.push(property)\n            }\n        }\n        this.setState({currentPokemonAttributeNames: currentPokemonAttributeNames})\n    }\n\n    renderAttributeElement(){\n        const sortOrder = [\"sprites\", \"height\", \"weight\", \"types\", \"stats\", \"abilities\", \"moves\"]\n        const currentPokemonAttributeNames = this.state.currentPokemonAttributeNames.sort((currentAtt, nextAtt) => {\n            return sortOrder.indexOf(currentAtt)>sortOrder.indexOf(nextAtt)?1:-1\n        })\n        const currentPokemonObject = this.state.currentPokemonObject\n        return currentPokemonAttributeNames.map((attribute) => {\n            switch(attribute){\n                case(\"abilities\"):\n                        const abilities = currentPokemonObject[attribute]\n                        return (\n                            <SelectedPokemonAbilitiesList \n                            key={`${this.state.currentPokemonName}-${attribute}`}\n                            abilitiesArray={abilities}\n                            />\n                        )\n                case(\"height\"):\n                        const height = currentPokemonObject[attribute]\n                        return <div className=\"selected-pokemon-attribute-div\" key={`${currentPokemonObject.name}-height`}><span><strong>Height</strong>: {height}</span></div>\n                case(\"weight\"):\n                        const weight = currentPokemonObject[attribute]\n                        return <div className=\"selected-pokemon-attribute-div\" key={`${this.state.currentPokemonName}-weight`}><span><strong>Weight</strong>: {weight}</span></div>\n                case(\"moves\"):\n                        const moves = currentPokemonObject[attribute]\n                        return(\n                            <SelectedPokemonMovesList \n                            key={`${this.state.currentPokemonName}-${attribute}`}\n                            movesArray={moves}\n                            />\n                        )\n                case(\"sprites\"):\n                        const sprites = currentPokemonObject[attribute]\n                        return(\n                            <SelectedPokemonImage\n                            key={`${this.state.currentPokemonName}-image`}\n                            name={this.state.currentPokemonName}\n                            spritesObject={sprites}\n                            />\n                        )\n                case(\"stats\"):\n                        const stats = currentPokemonObject[attribute]\n                        return(\n                            <SelectedPokemonStats\n                            key={`${this.state.currentPokemonName}-stats`}\n                            name={this.state.currentPokemonName}\n                            statsObjectArray={stats}\n                            />\n                        )\n                case(\"types\"):\n                        const types = currentPokemonObject[attribute]\n                        return(\n                            <SelectedPokemonTypes\n                            key={`${this.state.currentPokemonName}-types`}\n                            name={this.state.currentPokemonName}\n                            typesObjectArray={types}\n                            />\n                        )\n                default:\n                    return null;    \n            }\n        })\n    }\n\n    componentDidMount(){\n        this.getPokemonAttributeNames()\n    }\n    render(){\n        return(\n            <div id=\"selected-pokemon\">\n                <h1>{formatter(this.state.currentPokemonName)}</h1>\n                <div>\n                    {this.renderAttributeElement()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SelectedPokemon","import React, {Component} from 'react';\nimport SelectedPokemon from './SelectedPokemon';\nimport formatter from '../UtilityFunctions/formatter'\n\nclass FindOrDisplayPokemon extends Component {\n    state = {\n        allPokemonArray: this.props.pokemonList,\n        selectedPokemonObject:{},\n        searchedPokemonArray: [],\n        viewList: false,\n        viewSearch: false,\n        searchQuery:\"\"\n    }\n\n\n    searchPokemonByName(event){\n        const searchQuery = event.target.value.replace(\" \",\"-\");\n        const sortedPokemonList = this.state.allPokemonArray;\n        const searchedPokemonArray = [];\n        sortedPokemonList.forEach(pokemon=>pokemon.includes(searchQuery)?searchedPokemonArray.push(pokemon):false)\n        this.setState({searchedPokemonArray: searchedPokemonArray, searchQuery:searchQuery})\n    }\n\n    getSelectedPokemonObject(event){\n        const selectedPokemon = event.target.id.trim()\n        fetch(`https://pokeapi.co/api/v2/pokemon/${selectedPokemon}`).then(\n            (response) => {\n                response.json().then( json => {\n                    const selectedPokemonObject = json\n                    this.setState({selectedPokemonObject: selectedPokemonObject})\n                })\n            }\n        )\n    }\n\n    renderList(list){\n        const pokemonList = list\n        return(\n            <ul>\n                {pokemonList.map(pokemon=>{\n                    return(\n                        <li \n                        key={pokemon}\n                        id={pokemon}\n                        className=\"pokemon-list-item\"\n                        onClick={(event)=>this.getSelectedPokemonObject(event)}\n                        >\n                            {formatter(pokemon)}\n                        </li>\n                    )\n                })}\n            </ul>\n        ) \n\n\n    }\n\n    searchDisplaySwitch(){//Displays a search typeahead if viewSearch is true, if false, displays a button that will set viewSearch to true onClick\n        const viewSearch = this.state.viewSearch\n        switch(viewSearch){\n            case(true):\n                const searchQuery = this.state.searchQuery\n                return(\n                    <div>\n                        <label id=\"search-label\">Search</label>\n                        <input onChange={(event)=>this.searchPokemonByName(event)} style={{border:\"1px solid black\"}} value={searchQuery} id=\"search-input\"></input>\n                        <button className=\"close-btn\" onClick={()=>this.setState({viewSearch: false, searchQuery:\"\", searchedPokemonArray:[]})}>Close Search</button>\n                        {this.renderList(this.state.searchedPokemonArray)}\n                    </div>\n                )\n            default:\n                return(\n                    <div>\n                        <button className=\"list-or-search-button\" onClick={()=>this.setState({viewSearch:true, viewList: false, searchedPokemon:[]})}>View Search</button>\n                    </div>\n                )\n\n        }\n    }\n\n    listDisplaySwitch(){//Displays a list of pokemon if viewList true, if false, displays a button that will set viewList to true onClick\n        const viewList = this.state.viewList\n        switch(viewList){\n            case(true):\n                return(\n                    <div>\n                        <button className=\"close-btn\"onClick={()=>this.setState({viewList: false})}>Close List</button>\n                        {this.renderList(this.state.allPokemonArray)}\n                    </div>\n                )\n            default:\n                return(\n                    <div>\n                        <button className=\"list-or-search-button\" onClick={()=>this.setState({viewList:true, viewSearch: false})}>View All Pokemon</button>\n                    </div>\n                )  \n        }\n    }\n\n    selectedPokemonDisplaySwitch(){//If a user has clicked a pokemon, that pokemon and all its stats will be displayed. Otherwise, either the listDisplaySwitch function, searchDisplaySwitch function, or both will be called to determine what to render to the page\n        const selectedPokemonName = this.state.selectedPokemonObject.name\n        const viewList = this.state.viewList\n        const viewSearch = this.state.viewSearch\n        switch(selectedPokemonName){\n            case(undefined):\n                if(viewList){\n                    return this.listDisplaySwitch()\n                } else if(viewSearch){\n                    return this.searchDisplaySwitch()\n                } else {\n                    return (\n                        <div className=\"f-o-d-elmt-child\">\n                            {this.listDisplaySwitch()}\n                            {this.searchDisplaySwitch()}\n                        </div>\n                    )\n                }\n            default:\n                return(\n                    <div className=\"selected-pokemon-div\">\n                        <SelectedPokemon pokemonObject={this.state.selectedPokemonObject} className=\"selected-pokemon\"/>\n                        <button id=\"close-selected\" className=\"close-btn\" onClick={()=>this.setState({selectedPokemonObject:{}})}>Close</button>\n                    </div>\n                ) \n        }\n    }\n\n    render(){\n        return(\n            <div id=\"f-o-d-elmt\" className=\"body-font\">\n                {this.selectedPokemonDisplaySwitch()}\n            </div>\n        ) \n    }\n}\n\n\nexport default FindOrDisplayPokemon;","import React, { Component } from 'react';\nimport FindOrDisplayPokemon from './FindOrDisplayPokemon';\nimport \"../Assets/CSS/Pokedex.css\"\n\nclass Pokedex extends Component{\n    state = {\n        sortedPokemonList: []\n    }\n\n    getPokemonList(){\n        const pokemonSelected = this.state.pokemonSelected\n        if(!pokemonSelected){\n            fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=964\").then(\n                response => {\n                    response.json().then(\n                        (json) => {\n                            const results = json.results\n                            const pokemonNames = results.map((element) => element.name)\n                            const sortedPokemonList = pokemonNames.sort((currentPokemon, nextPokemon) => currentPokemon>nextPokemon?1:-1)\n                            this.setState({sortedPokemonList: sortedPokemonList})\n                        }    \n                    )\n                }\n            )\n        }\n    }\n\n\n    componentDidMount(){\n        this.getPokemonList()\n    }\n\n    render(){\n        return(\n            <div id=\"pokedex\">\n                <h1 id=\"pokedex-header\">Pokedex</h1>\n                <FindOrDisplayPokemon pokemonList={this.state.sortedPokemonList} key={`list-${this.state.sortedPokemonList.length}`}/>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Pokedex;","import React, { Component } from 'react';\nimport './Assets/CSS/App.css';\nimport Pokedex from './Components/Pokedex';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokedex />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Assets/CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}